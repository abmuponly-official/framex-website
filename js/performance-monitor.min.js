(function(){'use strict';const config={enableLogging:true,enableReporting:true,reportingEndpoint:'/api/performance',reportingInterval:30000,sampleRate:1.0,storageKey:'framex-performance-data',maxStoredMetrics:100};const performanceData={pageLoadTime:0,domReadyTime:0,windowLoadTime:0,resources:[],userTimings:{},errors:[],vitals:{},memory:{},connection:{},device:{}};const collectNavigationTiming=()=>{if(!('performance' in window)||!('timing' in performance))return;const timing=performance.timing;const navigation=performance.navigation;performanceData.pageLoadTime=timing.loadEventEnd-timing.navigationStart;performanceData.domReadyTime=timing.domContentLoadedEventEnd-timing.navigationStart;performanceData.windowLoadTime=timing.loadEventEnd-timing.navigationStart;return{dns:timing.domainLookupEnd-timing.domainLookupStart,tcp:timing.connectEnd-timing.connectStart,ssl:timing.connectEnd-timing.secureConnectionStart,ttfb:timing.responseStart-timing.navigationStart,download:timing.responseEnd-timing.responseStart,domParsing:timing.domInteractive-timing.domLoading,domContentLoaded:timing.domContentLoadedEventEnd-timing.domContentLoadedEventStart,domComplete:timing.domComplete-timing.domInteractive,loadEvent:timing.loadEventEnd-timing.loadEventStart,totalTime:timing.loadEventEnd-timing.navigationStart,redirectCount:navigation.redirectCount,navigationType:navigation.type};};const collectResourceTiming=()=>{if(!('performance' in window)||!('getEntriesByType' in performance))return[];const resources=performance.getEntriesByType('resource');const resourceData=[];resources.forEach(resource=>{const data={name:resource.name,type:resource.initiatorType,duration:resource.duration,size:resource.transferSize||0,protocol:resource.nextHopProtocol,dns:resource.domainLookupEnd-resource.domainLookupStart,tcp:resource.connectEnd-resource.connectStart,ssl:resource.secureConnectionStart>0?resource.connectEnd-resource.secureConnectionStart:0,ttfb:resource.responseStart-resource.startTime,download:resource.responseEnd-resource.responseStart,cached:resource.transferSize===0&&resource.decodedBodySize>0,compressed:resource.encodedBodySize>0&&resource.encodedBodySize<resource.decodedBodySize,compressionRatio:resource.decodedBodySize>0?(1-resource.encodedBodySize/resource.decodedBodySize)*100:0};if(resource.name.includes('.js'))data.category='javascript';else if(resource.name.includes('.css'))data.category='stylesheet';else if(resource.name.match(/\.(jpg|jpeg|png|gif|webp|svg)/))data.category='image';else if(resource.name.match(/\.(woff|woff2|ttf|otf)/))data.category='font';else data.category='other';resourceData.push(data);});resourceData.sort((a,b)=>b.duration-a.duration);return resourceData;};const collectMemoryUsage=()=>{if(!('memory' in performance))return null;return{usedJSHeapSize:Math.round(performance.memory.usedJSHeapSize/1048576),totalJSHeapSize:Math.round(performance.memory.totalJSHeapSize/1048576),jsHeapSizeLimit:Math.round(performance.memory.jsHeapSizeLimit/1048576),usage:((performance.memory.usedJSHeapSize/performance.memory.jsHeapSizeLimit)*100).toFixed(2)};};const collectConnectionInfo=()=>{if(!('connection' in navigator))return null;const connection=navigator.connection;return{effectiveType:connection.effectiveType,downlink:connection.downlink,rtt:connection.rtt,saveData:connection.saveData||false};};const collectDeviceInfo=()=>{return{userAgent:navigator.userAgent,platform:navigator.platform,language:navigator.language,screenResolution:`${screen.width}x${screen.height}`,viewportSize:`${window.innerWidth}x${window.innerHeight}`,pixelRatio:window.devicePixelRatio||1,colorDepth:screen.colorDepth,touchSupport:'ontouchstart' in window,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine,doNotTrack:navigator.doNotTrack==='1'};};const monitorErrors=()=>{window.addEventListener('error',(event)=>{const errorData={message:event.message,source:event.filename,line:event.lineno,column:event.colno,stack:event.error?event.error.stack:'',timestamp:Date.now(),userAgent:navigator.userAgent};performanceData.errors.push(errorData);if(performanceData.errors.length>50){performanceData.errors=performanceData.errors.slice(-50);}if(config.enableLogging){console.error('[Performance Monitor]JavaScript Error:',errorData);}});window.addEventListener('unhandledrejection',(event)=>{const errorData={type:'unhandledRejection',reason:event.reason,promise:event.promise,timestamp:Date.now()};performanceData.errors.push(errorData);if(config.enableLogging){console.error('[Performance Monitor]Unhandled Promise Rejection:',errorData);}});};const mark=(name)=>{if('performance' in window&&'mark' in performance){performance.mark(name);performanceData.userTimings[name]=performance.now();}};const measure=(name,startMark,endMark)=>{if('performance' in window&&'measure' in performance){try{performance.measure(name,startMark,endMark);const measures=performance.getEntriesByName(name,'measure');if(measures.length>0){performanceData.userTimings[name]=measures[0].duration;}}catch(e){console.error('Performance measure failed:',e);}}};const generateReport=()=>{const navigationTiming=collectNavigationTiming();const resources=collectResourceTiming();const memory=collectMemoryUsage();const connection=collectConnectionInfo();const device=collectDeviceInfo();const report={timestamp:Date.now(),url:window.location.href,timing:navigationTiming,resources:{total:resources.length,byType:{},slowest:resources.slice(0,10),totalSize:resources.reduce((sum,r)=>sum+(r.size||0),0),cachedCount:resources.filter(r=>r.cached).length,compressedCount:resources.filter(r=>r.compressed).length},vitals:performanceData.vitals,memory:memory,connection:connection,device:device,customTimings:performanceData.userTimings,errors:performanceData.errors.slice(-10)};resources.forEach(resource=>{if(!report.resources.byType[resource.category]){report.resources.byType[resource.category]={count:0,totalDuration:0,totalSize:0};}report.resources.byType[resource.category].count++;report.resources.byType[resource.category].totalDuration+=resource.duration;report.resources.byType[resource.category].totalSize+=resource.size||0;});return report;};const displayMetrics=()=>{const report=generateReport();console.group('🚀 FrameX Performance Report');console.group('📊 Page Load Timing');console.table({'DNS Lookup':`${report.timing.dns}ms`,'TCP Connection':`${report.timing.tcp}ms`,'SSL Negotiation':`${report.timing.ssl}ms`,'Time to First Byte':`${report.timing.ttfb}ms`,'Content Download':`${report.timing.download}ms`,'DOM Ready':`${performanceData.domReadyTime}ms`,'Page Load Complete':`${performanceData.pageLoadTime}ms`});console.groupEnd();console.group('📦 Resource Loading');console.table(report.resources.byType);console.log('Slowest Resources:',report.resources.slowest.slice(0,5));console.log(`Cache Hit Rate:${((report.resources.cachedCount/report.resources.total)*100).toFixed(1)}%`);console.groupEnd();if(Object.keys(report.vitals).length>0){console.group('🎯 Core Web Vitals');console.table(report.vitals);console.groupEnd();}if(report.memory){console.group('💾 Memory Usage');console.log(`Used:${report.memory.usedJSHeapSize}MB/${report.memory.jsHeapSizeLimit}MB(${report.memory.usage}%)`);console.groupEnd();}if(report.connection){console.group('🌐 Network Information');console.table(report.connection);console.groupEnd();}if(report.errors.length>0){console.group('❌ Recent Errors');console.table(report.errors);console.groupEnd();}console.groupEnd();};const sendReport=async(report)=>{if(!config.enableReporting)return;if(Math.random()>config.sampleRate)return;try{if('sendBeacon' in navigator){const blob=new Blob([JSON.stringify(report)],{type:'application/json'});navigator.sendBeacon(config.reportingEndpoint,blob);}else{await fetch(config.reportingEndpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(report)});}}catch(error){console.error('Failed to send performance report:',error);}};const storeMetricsLocally=(report)=>{try{let storedMetrics=JSON.parse(localStorage.getItem(config.storageKey)||'[]');storedMetrics.push(report);if(storedMetrics.length>config.maxStoredMetrics){storedMetrics=storedMetrics.slice(-config.maxStoredMetrics);}localStorage.setItem(config.storageKey,JSON.stringify(storedMetrics));}catch(error){console.error('Failed to store metrics locally:',error);}};const getStoredMetrics=()=>{try{return JSON.parse(localStorage.getItem(config.storageKey)||'[]');}catch(error){console.error('Failed to retrieve stored metrics:',error);return[];}};const init=()=>{monitorErrors();mark('navigationStart');window.addEventListener('load',()=>{setTimeout(()=>{const report=generateReport();storeMetricsLocally(report);if(config.enableLogging){displayMetrics();}sendReport(report);if(config.reportingInterval>0){setInterval(()=>{const periodicReport=generateReport();sendReport(periodicReport);},config.reportingInterval);}},1000);});document.addEventListener('visibilitychange',()=>{if(document.hidden){const finalReport=generateReport();sendReport(finalReport);}});window.addEventListener('web-vital-measured',(event)=>{const{metric,value,rating}=event.detail;performanceData.vitals[metric]={value:value,rating:rating};});};window.PerformanceMonitor={init,mark,measure,generateReport,displayMetrics,getStoredMetrics,config,data:performanceData};if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',init);}else{init();}})();