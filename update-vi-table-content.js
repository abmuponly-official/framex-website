#!/usr/bin/env node

/**
 * Update Vietnamese Table Content Only
 * Preserves design, updates content for VI locale
 * Date: 2025-09-28
 */

const fs = require('fs').promises;

async function updateVietnameseTable() {
    console.log('üìù Updating Vietnamese table content...');
    
    const newViTableHTML = `            <div class="comparison-table-wrapper">
                <table class="fx-table comparison-table" role="table" aria-label="So s√°nh s·∫£n ph·∫©m FrameX">
                    <caption class="sr-only">B·∫£ng so s√°nh c√°c g√≥i s·∫£n ph·∫©m FrameX: Starter, Smart v√† Premium</caption>
                    <thead>
                        <tr>
                            <th scope="col"><strong>T√≠nh nƒÉng</strong></th>
                            <th scope="col"><strong>FrameX STARTER</strong></th>
                            <th scope="col" class="featured-col"><strong>FrameX SMART</strong></th>
                            <th scope="col"><strong>FrameX PREMIUM</strong></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row"><strong>Di·ªán t√≠ch ph√π h·ª£p</strong></th>
                            <td>&lt; 150 m¬≤ (m·ªôt t·∫ßng)<br>ho·∫∑c 50 m¬≤/t·∫ßng (2‚Äì3 t·∫ßng)</td>
                            <td class="featured-col">&lt; 225 m¬≤ (m·ªôt t·∫ßng)<br>ho·∫∑c 75 m¬≤/t·∫ßng (2‚Äì3 t·∫ßng)</td>
                            <td>&gt; 300 m¬≤ s√†n<br>ho·∫∑c &gt; 150 m¬≤/t·∫ßng (2 t·∫ßng)</td>
                        </tr>
                        <tr>
                            <th scope="row"><strong>K·∫øt c·∫•u th√©p</strong></th>
                            <td>Ti√™u chu·∫©n</td>
                            <td class="featured-col">N√¢ng cao, c√≥ th·ªÉ t√πy bi·∫øn theo y√™u c·∫ßu</td>
                            <td>Cao c·∫•p, thi·∫øt k·∫ø ri√™ng ho√†n to√†n</td>
                        </tr>
                        <tr>
                            <th scope="row"><strong>Ch·ªëng th·∫•m</strong></th>
                            <td>C∆° b·∫£n</td>
                            <td class="featured-col">C∆° b·∫£n</td>
                            <td>N√¢ng cao</td>
                        </tr>
                        <tr>
                            <th scope="row"><strong>C√°ch nhi·ªát</strong></th>
                            <td>C∆° b·∫£n</td>
                            <td class="featured-col">C∆° b·∫£n</td>
                            <td>N√¢ng cao</td>
                        </tr>
                        <tr>
                            <th scope="row"><strong>Ti·ªán √≠ch th√¥ng minh (Smart Home)</strong></th>
                            <td><span class="empty-value">‚Äì</span></td>
                            <td class="featured-col">C∆° b·∫£n<br>(ch·ªëng tr·ªôm, b√°o ch√°y, camera, internet)</td>
                            <td>N√¢ng cao<br>t√πy ch·ªânh theo y√™u c·∫ßu ri√™ng</td>
                        </tr>
                        <tr>
                            <th scope="row"><strong>Ch·ªëng ch√°y</strong></th>
                            <td><span class="empty-value">‚Äì</span></td>
                            <td class="featured-col"><span class="empty-value">‚Äì</span></td>
                            <td>K·∫øt c·∫•u ch·ªëng ch√°y ƒë·∫ßy ƒë·ªß</td>
                        </tr>
                        <tr>
                            <th scope="row"><strong>Chi ti·∫øt s·∫Øt m·ªπ thu·∫≠t</strong><br>(c·∫ßu thang, lan can, chi ti·∫øt ƒë·∫∑c bi·ªát)</th>
                            <td>C·∫ßu thang ƒë∆°n gi·∫£n</td>
                            <td class="featured-col">C·∫ßu thang ƒë∆°n gi·∫£n</td>
                            <td>C·∫ßu thang + lan can + c√°c chi ti·∫øt ƒë·∫∑c bi·ªát</td>
                        </tr>
                        <tr>
                            <th scope="row"><strong>B·∫£o h√†nh</strong></th>
                            <td>15 nƒÉm</td>
                            <td class="featured-col">15 nƒÉm</td>
                            <td>20 nƒÉm</td>
                        </tr>
                        <tr>
                            <th scope="row"><strong>Kh√°ch h√†ng m·ª•c ti√™u</strong></th>
                            <td>Nh√† ph·ªë nh·ªè, c√¥ng tr√¨nh ph·ªï th√¥ng</td>
                            <td class="featured-col">Villa nh·ªè, c·∫ßn ti·ªán √≠ch &amp; c√° nh√¢n h√≥a</td>
                            <td>Bi·ªát th·ª± l·ªõn, c√¥ng tr√¨nh ƒë·∫∑c bi·ªát</td>
                        </tr>
                    </tbody>
                </table>
            </div>`;
    
    try {
        // Update products.html
        let content = await fs.readFile('products.html', 'utf8');
        
        // Find and replace the comparison table
        const tableStart = content.indexOf('<div class="comparison-table-wrapper">');
        const tableEnd = content.indexOf('</div>', 
            content.indexOf('</table>', tableStart)) + 6;
        
        if (tableStart === -1) {
            throw new Error('Table wrapper not found');
        }
        
        content = content.substring(0, tableStart) + 
                 newViTableHTML + 
                 content.substring(tableEnd);
        
        await fs.writeFile('products.html', content, 'utf8');
        
        console.log('‚úÖ Updated Vietnamese table content');
        
        // Create data model
        const viDataModel = {
            features: [
                {
                    name: "Di·ªán t√≠ch ph√π h·ª£p",
                    starter: "< 150 m¬≤ (m·ªôt t·∫ßng) ho·∫∑c 50 m¬≤/t·∫ßng (2‚Äì3 t·∫ßng)",
                    smart: "< 225 m¬≤ (m·ªôt t·∫ßng) ho·∫∑c 75 m¬≤/t·∫ßng (2‚Äì3 t·∫ßng)",
                    premium: "> 300 m¬≤ s√†n ho·∫∑c > 150 m¬≤/t·∫ßng (2 t·∫ßng)"
                },
                {
                    name: "K·∫øt c·∫•u th√©p",
                    starter: "Ti√™u chu·∫©n",
                    smart: "N√¢ng cao, c√≥ th·ªÉ t√πy bi·∫øn theo y√™u c·∫ßu",
                    premium: "Cao c·∫•p, thi·∫øt k·∫ø ri√™ng ho√†n to√†n"
                },
                {
                    name: "Ch·ªëng th·∫•m",
                    starter: "C∆° b·∫£n",
                    smart: "C∆° b·∫£n",
                    premium: "N√¢ng cao"
                },
                {
                    name: "C√°ch nhi·ªát",
                    starter: "C∆° b·∫£n",
                    smart: "C∆° b·∫£n",
                    premium: "N√¢ng cao"
                },
                {
                    name: "Ti·ªán √≠ch th√¥ng minh (Smart Home)",
                    starter: "‚Äì",
                    smart: "C∆° b·∫£n (ch·ªëng tr·ªôm, b√°o ch√°y, camera, internet)",
                    premium: "N√¢ng cao t√πy ch·ªânh theo y√™u c·∫ßu ri√™ng"
                },
                {
                    name: "Ch·ªëng ch√°y",
                    starter: "‚Äì",
                    smart: "‚Äì",
                    premium: "K·∫øt c·∫•u ch·ªëng ch√°y ƒë·∫ßy ƒë·ªß"
                },
                {
                    name: "Chi ti·∫øt s·∫Øt m·ªπ thu·∫≠t",
                    subtitle: "(c·∫ßu thang, lan can, chi ti·∫øt ƒë·∫∑c bi·ªát)",
                    starter: "C·∫ßu thang ƒë∆°n gi·∫£n",
                    smart: "C·∫ßu thang ƒë∆°n gi·∫£n",
                    premium: "C·∫ßu thang + lan can + c√°c chi ti·∫øt ƒë·∫∑c bi·ªát"
                },
                {
                    name: "B·∫£o h√†nh",
                    starter: "15 nƒÉm",
                    smart: "15 nƒÉm",
                    premium: "20 nƒÉm"
                },
                {
                    name: "Kh√°ch h√†ng m·ª•c ti√™u",
                    starter: "Nh√† ph·ªë nh·ªè, c√¥ng tr√¨nh ph·ªï th√¥ng",
                    smart: "Villa nh·ªè, c·∫ßn ti·ªán √≠ch & c√° nh√¢n h√≥a",
                    premium: "Bi·ªát th·ª± l·ªõn, c√¥ng tr√¨nh ƒë·∫∑c bi·ªát"
                }
            ]
        };
        
        await fs.writeFile(
            'vi-table-data-model.json',
            JSON.stringify(viDataModel, null, 2),
            'utf8'
        );
        
        console.log('üìä Created vi-table-data-model.json');
        console.log('‚úÖ Vietnamese table update complete!');
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    }
}

updateVietnameseTable().catch(console.error);